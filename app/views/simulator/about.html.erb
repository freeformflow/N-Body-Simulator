<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
<div id='nav_bar'>
  <a href='http://www.pandastrike.com'><img src="<%= asset_path('pandastrike_logo.png')%>" id='logo'> </a>
  <h1 id='title'>About</h1>
</div>


<ul id='controls'>
  <a href="<%= main_path %>">
    <li id='about_button'>
      Back to Simulation
    </li>
  </a>
</ul>

<br> <br> <br> <br> <br>

<div id='text_blob'>
  <h1>The Technology</h1>
  Hi there! Thanks for checking this out.  This app is constructed using
  CoffeeScript and HTML 5's Canvas element.  CoffeeScript is a variant of JavaScript
  that easier to read, write, and maintain -- All the while compiling into standard
  JavaScript.  While there are limitations to the processing speed of JavaScript,
  its acceptance as a Web Standard is unmatched.  The same is true of
  the Canvas element.  Overall, this app is a demonstration of modern web design.
  Apps like this one can be quickly be assembled, deployed using out-of-the-box components, and
  deliver platform agnostic performance.

  <br> <br>
  <a href='https://github.com/PandaPup/N-Body-Simulator'>Source Code</a> <br>
  <a href='https://coffeescript.org'>CoffeeScript</a> <br>
  <a href='https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial'>Canvas<a/a>

  <hr>
  <h1>The Physics</h1>
  The N-Body problem is a classic among the physics and computer science fields.
  The solution to the system of equations that govern these body's motions cannot
  be expressed analytically... So, computers are employed to calculate their dynamics via
  a more brute-force means.  There are limits, though.  As you add more bodies, the
  complexity of the problem grows as O(n^2).  Fortunatly, keeping the problem 2
  dimensional means that this app can keep up and deliver the results directly for
  animation. <br><br>

  Some parameters are available for you to modify.  Play with the strength of the
  attraction between particles, and see how you can control the behavior.  When the
  simulation starts, the particles are evenly distributed. Because of this, they
  have access to so much kinetic energy that they zip past each other.  They are
  not gravitationally bound to one another.  In order to change that, you can bleed
  energy out of the system each time a particle hits a wall.  Modify the wall collision
  parameter.  Perfectly elastic collisions keep energy in the system, inelastic
  ones drain it out.

  <hr>
  <h1>The People</h1>
  Hi again!  I'm David, and I built this app (with some gracious help).
  I'm a new intern at PandaStrike, a web consulting firm based in Los Angeles, CA.
  PandaStrike specializes in the effective use of innovative technologies (For
  example: Node.js, Elasticsearch, and of course CoffeeScript).  We consult for a variety
  of clients and participate in the local development/start-up community.  If we
  sound cool to you, check us out or contact our Sage Pandas at
  <a href='http://www.pandastrike.com'>PandaStrike.com</a>
</div>


</body>
</html>
