== The People
Hi there!  Thanks for checking this out.  I'm David Harper, and I built this app
(with some gracious help).

I'm a new intern at PandaStrike, a web consulting firm based in Los Angeles, CA.
PandaStrike specializes in the application of innovative technologies (Node.js,
Elasticsearch, Redis, and of course CoffeeScript).  My background is in computational
chemistry... which you could say makes me a little odd, haha, but PandaStrike embraces
diversity and values novel solutions that are effective. We consult for a variety
of clients and really strive to be a part of the local development/start-up community.
If we sound cool to you, check us out or contact one of our Sage Pandas at...

<a href='http://www.pandastrike.com'>PandaStrike.com</a>

--------------------------------------------------------------------------------------

==The Technology
This app is constructed using
CoffeeScript and HTML 5's Canvas element.  CoffeeScript is a variant of JavaScript
that easier to read, write, and maintain -- All the while compiling into standard
JavaScript.  While there are limitations to the processing speed of JavaScript,
its acceptance as a Web Standard is unmatched.  The same can be said of
the Canvas element. Overall, this app is a demonstration of modern web design:
Apps like this one can be quickly be assembled, deployed using out-of-the-box components, and
deliver platform-agnostic performance.

Though this source code is original, in-browser physics is an area of rapid
development.  In particular, this simulator draws inspiration from Jasper Palfree
of Well Caffeinated.

<a href='https://github.com/PandaPup/N-Body-Simulator'>Source Code</a> <br>
<a href='http://wellcaffeinated.net/articles/2013/04/16/playing-with-asm-js-and-browser-physics/'>Well Caffeinated</a> <br>
<a href='//coffeescript.org'>CoffeeScript</a> <br>
<a href='https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial'>Canvas<a/a>

--------------------------------------------------------------------------------------

==The Physics
The N-Body problem is a classic among the physics and computer science fields.
The solution to the system of equations that govern these body's motions cannot
be expressed analytically... So, computers are employed to calculate their dynamics via
brute-force means.  There are limits, though.  As you add more bodies, the
complexity of the problem grows as O(n^2).  Fortunately, this app is 2-dimensional,
meaning that it can keep up and deliver the results directly for
animation. <br><br>

Some parameters are available for you to modify.  Play with the strength of the
attraction and see how you can control the behavior.
When the
simulation starts, the particles are evenly distributed. Because of this, they
have access to so much kinetic energy that they are not gravitationally bound,
they zip past each other. In order to change that, you can suck energy out of
the system through collisions.  Try out the wall collision
parameter.  Perfectly elastic collisions keep energy in the system, inelastic
ones drain it out.  Turning on particle-particle collision makes use of inelastic
collisions.  The particles will clump up and not go very far.

<a href='http://en.wikipedia.org/wiki/N-body_problem'>N-Body Problem</a>
